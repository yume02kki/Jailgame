using MazeGame.MazeGame.Application;
using MazeGame.MazeGame.Application.Commands;
using MazeGame.MazeGame.Application.Enums;
using MazeGame.MazeGame.Core.Enums;
using MazeGame.MazeGame.Core.Interactables;
using MazeGame.MazeGame.Core.Utility;
using MazeGame.MazeGame.Presentation;

namespace MazeGame.MazeGame.Core;

public class MapMaker
{
    private Dictionary<IntVector2, Node> nodeTable;
    private IntVector2 size;
    private string sequence;
    
    public MapMaker(IntVector2 size,string sequence)
    {
        nodeTable = new Dictionary<IntVector2, Node>();
        this.sequence = sequence;
        this.size = size;
        generateMap();
    }

    public Node? getNode(Room room) => nodeTable.Values.FirstOrDefault(node => node.room==room);
    public Node? getNode(IntVector2 pos) => nodeTable.GetValueOrDefault(pos);
    public Room? getRoom(IntVector2 pos) => getNode(pos)?.room;

    public void generateMap()
    {
        int count = 1;
        Node spawn = new Node(new Room("spawn", size));
        nodeTable[new IntVector2(0, 0)] = spawn;
        Node traverse = spawn;
        IntVector2 lastPosition = nodeTable.Last().Key;
        foreach (char letter in sequence)
        {
            Directions directions = charToDirection(letter);
            IntVector2 tempRoomPosition = lastPosition + TransformDirection.directionVector[directions];
            nodeTable.TryGetValue(tempRoomPosition, out Node? temp);
            if (temp == null)
            {
                temp = new Node(new Room(""+count, size));
                nodeTable[tempRoomPosition] = temp;
            }
            else
            {
                lastPosition = tempRoomPosition;
                traverse = temp;
            }

            neighborLink(traverse, lastPosition);
            traverse = temp;
            lastPosition = tempRoomPosition;
            count++;
        }
    }

    private void neighborLink(Node node, IntVector2 position)
    {
        foreach (Directions direction in Enum.GetValues<Directions>())
        {
            IntVector2 addedPosition = TransformDirection.directionVector[direction] + position;
            if (nodeTable.ContainsKey(addedPosition))
            {
                doorLink(node, nodeTable[addedPosition], direction);
            }
        }
    }

    private void doorLink(Node self, Node target, Directions direction)
    {
        self.link(direction, target);
        IntVector2 normalPos = getDoorPosition(direction, new IntVector2(self.room.getPlayareaWidth(), self.room.getPlayareaHeight()));
        IntVector2 mirrorPos = new IntVector2
        {
            X = Misc.wrapAround(normalPos.X, target.room.getPlayareaWidth()),
            Y = Misc.wrapAround(normalPos.Y, target.room.getPlayareaHeight())
        };

        Directions mirror = TransformDirection.mirrorDirection[direction];
        if (direction == Directions.RIGHT || direction == Directions.DOWN)
        {
            IntVector2 tempPos = new(normalPos);
            normalPos = mirrorPos;
            mirrorPos = tempPos;
        }

        self.room.setEntity(new Entity($"door_{Misc.enumToString(direction)}", normalPos,
            [new Open(), new Renders(Icons.get("doorOpen"))], [Tags.Doorway]));

        target.room.setEntity(new Entity($"door_{Misc.enumToString(mirror)}", mirrorPos,
            [new Open(), new Renders(Icons.get("doorOpen"))], [Tags.Doorway]));
    }

    public Entity getAutoGeneratedDoor(Room room, Directions? direction = null)
    {
        List<Entity> doors = room.getEntityList().FindAll(entity => entity.tags.Contains(Tags.Doorway)).Select(entity => entity).ToList();

        return direction == null ? doors.First() : doors.Find(door => door.name.Contains(Misc.enumToString(direction))) ?? doors.First();
    }

    private IntVector2 getDoorPosition(Directions directions, IntVector2 pos)
    {
        double multX = 1;
        double multY = 1;
        if (directions == Directions.UP || directions == Directions.DOWN)
        {
            multX = 0.5;
            multY = 0;
        }
        else if (directions == Directions.LEFT || directions == Directions.RIGHT)
        {
            multX = 0;
            multY = 0.5;
        }

        return new IntVector2((int)Math.Ceiling(pos.X * multX), (int)Math.Ceiling(pos.Y * multY));
    }

    private Directions charToDirection(char letter)
    {
        letter = letter.ToString().ToUpper().First();
        switch (letter)
        {
            case 'L':
                return Directions.LEFT;
            case 'R':
                return Directions.RIGHT;
            case 'U':
                return Directions.UP;
            case 'D':
                return Directions.DOWN;
        }

        return default;
    }
}