using MazeGame.MazeGame.Application.Commands;
using MazeGame.MazeGame.Application.Enums;
using MazeGame.MazeGame.Core;
using MazeGame.MazeGame.Core.Enforcers;
using MazeGame.MazeGame.Core.Enums;
using MazeGame.MazeGame.Core.Interactables;
using MazeGame.MazeGame.Core.LoadScene;
using MazeGame.MazeGame.Core.Module;
using MazeGame.MazeGame.Presentation;

namespace MazeGame.MazeGame.Application;

public class GameCreator
{
    private const int SIZE_W = 6;
    private const int SIZE_H = 4;
    private const string SEQUENCE = "LUURULUDL";

    //singleton

    private static readonly Lazy<GameCreator> _instance = new Lazy<GameCreator>(() => new GameCreator());
    public static GameCreator Instance => _instance.Value;
    public GameStates GameState = GameStates.ONGOING;
    public Player player;

    private GameCreator()
    {
        GameProfile profile = new GameProfile(SIZE_W, SIZE_H, SEQUENCE);
        RoomGeneration init = profile.roomGenerator;
        player = profile.player;
        Dictionary<string, Room> rooms = profile.rooms;

        //Needle
        Entity needle = new Entity("needle");

        //Dog Food
        Entity dogFood = new Entity("bonzo");

        //Door
        {
            var defaultDoor = init.getAutoGeneratedDoor(rooms["spawn"]);
            var lockEnforcer = new LockEnforcer();
            var open = new Open(lockEnforcer: lockEnforcer);

            var components = new List<Component>
            {
                open,
                new Used(needle, lockEnforcer.unlock),
                new Renders(() => open.isOpen, new Render("☐", ConsoleColor.Green), new Render("▥", ConsoleColor.Red)),
                new Collide(() => !open.isOpen),
            };

            init.addEntity(
                new IntVector2(0, 0),
                new Entity(defaultDoor.name, defaultDoor.pos, new HashSet<Tags>() { Tags.Doorway }, components)
            );
        }

        //Bed
        {
            var components = new List<Component>
            {
                new Renders(new Render("_", ConsoleColor.Blue)),
                new Examine(needle, player.addToInventory),
            };

            init.addEntity(new IntVector2(0, 0),
                new Entity("bed", new IntVector2(2, 1), components: components));
        }

        // Dog
        {
            var dogHungry = true;
            var dogDoor = init.getAutoGeneratedDoor(rooms["dog"], Directions.UP);

            var components = new List<Component>
            {
                new Renders(() => dogHungry, new Render("☗", ConsoleColor.Yellow),
                    new Render("☖", ConsoleColor.Yellow)),
                new Collide(() => dogHungry),
                new Used(dogFood, () => dogHungry = false),
            };

            init.addEntity(
                new IntVector2(-1, 3),
                new Entity("dog", dogDoor.pos + new IntVector2(0, 1), components: components)
            );
        }
        // Bowl
        {
            var components = new List<Component>
            {
                new Renders(new Render("◡", ConsoleColor.Yellow)),
                new Examine(dogFood, player.addToInventory),
            };

            init.addEntity(new IntVector2(0, 3),
                new Entity("bowl", new IntVector2(4, 1), components: components)
            );
        }

        // Guard
        {
            var components = new List<Component>
            {
                new Renders(new Render("¶", ConsoleColor.Blue)),
                new OnLoad(() => GameState = GameStates.LOSE),
            };

            init.addEntity(new IntVector2(-2, 3),
                new Entity("guard", new IntVector2(2, 2), components: components)
            );
        }

        // Escape
        {
            var components = new List<Component>
            {
                new Renders(new Render("♕", ConsoleColor.Yellow)),
                new OnLoad(() => GameState = GameStates.WIN),
            };

            init.addEntity(new IntVector2(-1, 4),
                new Entity("win", new IntVector2(2, 2), components: components)
            );
        }
    }
}