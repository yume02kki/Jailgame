using System.Security.Cryptography.X509Certificates;
using System.Text.Json.Serialization;
using MazeGame.MazeGame.Application.Commands;
using MazeGame.MazeGame.Application.Enums;
using MazeGame.MazeGame.Core;
using MazeGame.MazeGame.Core.Enforcers;
using MazeGame.MazeGame.Core.Enums;
using MazeGame.MazeGame.Core.Interactables;
using MazeGame.MazeGame.Core.Module;
using MazeGame.MazeGame.Presentation;

namespace MazeGame.MazeGame.Application;

public class GameCreator
{
    //singleton
    private static Lazy<GameCreator> _instance { get; set; } = new Lazy<GameCreator>(() => new GameCreator());

    public static GameCreator Instance
    {
        get => _instance.Value;
    }

    public string sequence { get; set; } = "LUURULUDL";
    public IntVector2 size { get; } = new IntVector2(6, 4);
    public GameStates gameState { get; private set; } = GameStates.ONGOING;
    [JsonIgnore] private MapMaker map { get; set; }
    public Dictionary<string, Node> nodes { get; set; }
    public Player player { get; set; }

    private Room getRoom(string roomName) => nodes[roomName].room;

    public void resetInstance(GameCreator gameCreator) => _instance = new Lazy<GameCreator>(() => gameCreator);

    [JsonConstructor]
    private GameCreator()
    {
        map = new MapMaker(size, sequence);
        nodes = new Dictionary<string, Node>
        {
            ["spawn"] = map.getNode(new IntVector2(0, 0))!,
            ["exit"] = map.getNode(new IntVector2(-1, 4))!,
            ["dog"] = map.getNode(new IntVector2(-1, 3))!,
            ["guard"] = map.getNode(new IntVector2(-2, 3))!,
            ["dogfood"] = map.getNode(new IntVector2(0, 3))!,
        };

        player = new Player(nodes["spawn"], new IntVector2(3, 2));
        Console.WriteLine(player.pos);

        //Needle
        Entity needle = new Entity("needle");

        //Dog Food
        Entity dogFood = new Entity("bonzo");

        //Door
        {
            var defaultDoor = map.getAutoGeneratedDoor(getRoom("spawn"));
            var lockEnforcer = new LockEnforcer();
            var open = new Open(lockEnforcer: lockEnforcer);
            var components = new List<Component>
            {
                open,
                new Used(needle, lockEnforcer.unlock),
                new Renders(() => open.isOpen, Icons.get("doorOpen"), Icons.get("doorClosed")),
                new Collide(() => !open.isOpen),
            };
            getRoom("spawn").setEntity(new Entity(defaultDoor.name, defaultDoor.pos, components, [Tags.Doorway]));
        }

        //Bed
        {
            var components = new List<Component>
            {
                new Renders(Icons.get("bed")),
                new Examine(needle, player.addToInventory),
            };
            getRoom("spawn").setEntity(new Entity("bed", new IntVector2(2, 1), components));
        }

        // Dog
        {
            var dogHungry = true;
            var dogDoor = map.getAutoGeneratedDoor(getRoom("dog"), Directions.UP);
            var components = new List<Component>
            {
                new Renders(() => dogHungry, Icons.get("dogHungry"), Icons.get("dogFed")),
                new Collide(() => dogHungry),
                new Used(dogFood, () => dogHungry = false),
            };
            getRoom("dog").setEntity(new Entity("dog", dogDoor.pos + new IntVector2(0, 1), components));
        }
        // Bowl
        {
            var components = new List<Component>
            {
                new Renders(Icons.get("bowl")),
                new Examine(dogFood, player.addToInventory),
            };
            getRoom("dogfood").setEntity(new Entity("bowl", new IntVector2(4, 1), components: components));
        }

        // Guard
        {
            var components = new List<Component>
            {
                new Renders(Icons.get("guard")),
                new OnLoad(() => gameState = GameStates.LOSE),
            };
            getRoom("guard").setEntity(new Entity("guard", new IntVector2(2, 2), components: components));
        }

        // Escape
        {
            var components = new List<Component>
            {
                new Renders(Icons.get("crown")),
                new OnLoad(() => gameState = GameStates.WIN),
            };
            getRoom("exit").setEntity(new Entity("win", new IntVector2(2, 2), components: components));
        }
    }
}