using System.Text.Json.Serialization;
using MazeGame.MazeGame.Application.Commands;
using MazeGame.MazeGame.Application.Enums;
using MazeGame.MazeGame.Core;
using MazeGame.MazeGame.Core.Enforcers;
using MazeGame.MazeGame.Core.Enums;
using MazeGame.MazeGame.Core.Interactables;
using MazeGame.MazeGame.Core.Module;

namespace MazeGame.MazeGame.Application;

public class GameCreator
{
    //singleton
    private static Lazy<GameCreator> _instance { get; set; } = new Lazy<GameCreator>(() => new GameCreator());

    public static GameCreator Instance => _instance.Value;

    public string sequence { get; set; } = "LUURULUDL";
    public IntVector2 size { get; } = new IntVector2(6, 4);
    public GameStates gameState { get; private set; } = GameStates.ONGOING;
    private MapMaker map { get; set; }
    public Dictionary<string, Node> nodes { get; set; }
    public Player player { get; set; }
    private Dictionary<string, Action> actionMapping = new Dictionary<string, Action>();
    private Room getRoom(string roomName) => nodes[roomName].room;

    public void resetInstance(GameCreator gameCreator) => _instance = new Lazy<GameCreator>(() => gameCreator);

    [JsonConstructor]
    private GameCreator()
    {
        map = new MapMaker(size, sequence);
        nodes = new Dictionary<string, Node>
        {
            ["spawn"] = map.getNode(new IntVector2(0, 0))!,
            ["exit"] = map.getNode(new IntVector2(-1, 4))!,
            ["dog"] = map.getNode(new IntVector2(-1, 3))!,
            ["guard"] = map.getNode(new IntVector2(-2, 3))!,
            ["dogfood"] = map.getNode(new IntVector2(0, 3))!
        };

        player = new Player(nodes["spawn"], new IntVector2(3, 2));

        //Needle
        Entity needle = new Entity("needle");

        //Dog Food
        Entity dogFood = new Entity("bonzo");

        //Door
        {
            OpenEnforcer openEnforcer = new OpenEnforcer(needle);
            Open open = new Open("openDoor", openEnforcer);
            Used used = new Used("needleDoor", needle, item => openEnforcer.unlock(item));
            Collide collide = new Collide("spawnDoor", () => !open.isOpen);
            Entity defaultDoor = map.getAutoGeneratedDoor(getRoom("spawn"));

            Renders renders = new Renders("doorRenders", Icons.get("doorOpen"), Icons.get("doorClosed"), () => open.isOpen);
            var components = new List<Icomponent> { open, used, renders, collide };
            getRoom("spawn").setEntity(new Entity(defaultDoor.name, defaultDoor.pos, components, [Tags.Doorway]));
        }
        //Bed
        {
            Renders renders = new Renders("bedRender", Icons.get("bed"));
            Examine examine = new Examine("bedNeedle", needle);

            var components = new List<Icomponent> { renders, examine };
            getRoom("spawn").setEntity(new Entity("bed", new IntVector2(2, 1), components));
        }
        // Dog
        {
            var dogHungry = true;
            Entity dogDoor = map.getAutoGeneratedDoor(getRoom("dog"), Directions.UP);

            Used used = new Used("hungryDog", dogFood, _ => dogHungry = false);
            Renders renders = new Renders("dogRenders", Icons.get("dogHungry"), Icons.get("dogFed"), () => dogHungry);
            Collide collide = new Collide("dog", () => dogHungry);

            var components = new List<Icomponent> { used, collide, renders };
            getRoom("dog").setEntity(new Entity("dog", dogDoor.pos + new IntVector2(0, 1), components));
        }
        // Bowl
        {
            Renders renders = new Renders("dogBowl", Icons.get("bowl"));
            Examine examine = new Examine("dogBowlFood", dogFood);

            var components = new List<Icomponent> { renders, examine };
            getRoom("dogfood").setEntity(new Entity("bowl", new IntVector2(4, 1), components));
        }
        // Guard
        {
            Renders renders = new Renders("guard", Icons.get("guard"));
            OnLoad onLoad = new OnLoad("guardLoad", () => gameState = GameStates.LOSE);

            var components = new List<Icomponent> { renders, onLoad };
            getRoom("guard").setEntity(new Entity("guard", new IntVector2(2, 2), components));
        }
        // Escape
        {
            Renders renders = new Renders("crown", Icons.get("crown"));
            OnLoad onLoad = new OnLoad("winLoad", () => gameState = GameStates.WIN);

            var components = new List<Icomponent> { renders, onLoad };
            getRoom("exit").setEntity(new Entity("win", new IntVector2(2, 2), components));
        }
    }
}