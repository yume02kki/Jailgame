using MazeGame.Entitys;

namespace MazeGame;

public class LogicManager
{
    private const int SIZE_W = 6;
    private const int SIZE_H = 4;
    private const string SEQUENCE = "LUURULUDL";

    //singleton
    private static readonly Lazy<LogicManager> _instance = new Lazy<LogicManager>(() => new LogicManager());
    public static LogicManager Instance => _instance.Value;
    public bool gameOver = false;
    public Player player;

    private LogicManager()
    {
        GameProfile profile = new GameProfile(SIZE_W, SIZE_H, SEQUENCE);
        GameInit init = profile.init;
        player = profile.player;
        Dictionary<string, Room> rooms = profile.rooms;

        //Needle
        Obj needle = new Obj("needle");

        //Dog Food
        Obj dogFood = new Obj("bonzo");

        //Door
        {
            Door firstDoor = init.getAutoGeneratedDoor(rooms["spawn"]);
            Open doorLock = new Open(locked:true);
            Used used = new Used(needle, doorLock.unlock);

            //TODO: make Door depricated ! ! !, use Entity
            init.addEntity((0, 0), new Door(firstDoor.Name, firstDoor.x, firstDoor.y, doorLock, used));
        }

        //Bed
        {
            Render render = new Render("_", ConsoleColor.Blue);
            Examine examine = new Examine(needle, player.addInv);
            init.addEntity((0, 0), new Entity("bed", 2, 1, render, examine));
        }

        //Dog
        {
            Door dogDoor = init.getAutoGeneratedDoor(rooms["dog"], Direction.up);
            Used used = new Used(dogFood, () => { Console.WriteLine("dog is fed"); }); 
            init.addEntity((-1, 3), new Door("dog", dogDoor.x, dogDoor.y + 1, used));
        }

        //Bowl
        {
            Render render = new Render("◡", ConsoleColor.Yellow);
            Examine examine = new Examine(dogFood, player.addInv);
            init.addEntity((0, 3), new Entity("bowl", 4, 1, render, examine));
        }
    }
}